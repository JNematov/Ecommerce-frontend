import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

const user = JSON.parse(localStorage.getItem("user"));
const initialState = {
  user: user ? user : null,
};

export const login = createAsyncThunk(
  "user/login",
  async ({ email, password }, thunkAPI) => {
    try {
      const response = await fetch("http://localhost:8000/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
      });

      if (!response.ok) {
        throw new Error("Login failed"); // Throw an error to be caught by rejected action handler
      }

      const json = await response.json();
      localStorage.setItem("user", JSON.stringify(json));
      return json; // Return the user data as the fulfilled value
    } catch (error) {
      return thunkAPI.rejectWithValue(error.message); // Use rejectWithValue to pass the error message as the rejected value
    }
  }
);

export const logout = createAsyncThunk("user/logout", async () => {
  localStorage.removeItem("user"); //remove user json from local storage
  //dispatch clear cart
});
export const signup = createAsyncThunk(
  "user/signup",
  async ({ email, password }, thunkAPI) => {
    const response = await fetch("http://localhost:8000/signup", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email, password }),
    });
    const json = await response.json();
    if (!response.ok) {
      console.log("error signing up");
    }
    if (response.ok) {
      //store token in localstorage to prevent loss in refreshes
      localStorage.setItem("user", JSON.stringify(json));
      //dispatch user, register token
      return json;
    }
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {},
  /*
    extra reducers are used to handle actions generated by asynchronous logic,
    such as promises, thunks, or other middleware.
    extraReducers takes a builder function that allows you to define reducers 
    using a more flexible syntax.
  */
  extraReducers: (builder) => {
    builder
      .addCase(login.fulfilled, (state, action) => {
        state.user = action.payload;
      })
      .addCase(login.rejected, (state) => {
        state.user = null;
      })
      .addCase(logout.fulfilled, (state) => {
        localStorage.removeItem("user"); // user json removed, token is now absent
        state.user = null;
      });
  },
});

export default userSlice.reducer;
